OBJECTIVES
Explain what a hash table is
Define what a hashing algorithm is
Discuss what makes a good hashing algorithm
Understand how collisions occur in a hash table
Handle collisions using separate chaining or linear probing

WHAT IS A HASH TABLE?
Hash tables are used to store key-value pairs.
They are like arrays, but the keys are not ordered.
Unlike arrays, hash tables are fast for all of the following operations: finding values, adding new values, and removing values!

WHY SHOULD I CARE?
Nearly every programming language has some sort of hash table data structure
Because of their speed, hash tables are very commonly used!


HASH TABLES
Introductory Example
Imagine we want to store some colors
We could just use an array/list
[ "#ff69b4","#ff4500","#00ffff" ] 
Not super readable!  What do these colors correspond to?

HASH TABLES
Introductory Example
It would be nice if instead of using indices to access the colors, we could use more human-readable keys.

Pink -----> #ff69b4
Orangered -----> #ff4500
cyan ------> #00ffff

THE HASH PART
To implement a hash table, we'll be using an array.
In order to look up values by key, we need a way to convert keys into valid array indices.
A function that performs this task is called a hash function.

WHAT MAKES A GOOD HASH?
(not a cryptographically secure one)

Fast (i.e. constant time)
Doesn't cluster outputs at specific indices, but distributes uniformly
Deterministic (same input yields same output)

